name: Release Build

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        variant:
          - { name: "Non-KSU", KSU: "None", KSU_SUSFS: "false", KSU_MANUAL_HOOK: "false", LAST_BUILD: "false" }
          - { name: "KSUN+SuSFS", KSU: "Next", KSU_SUSFS: "true", KSU_MANUAL_HOOK: "true", LAST_BUILD: "false" }
          - { name: "SUKISU+SuSFS", KSU: "Suki", KSU_SUSFS: "true", KSU_MANUAL_HOOK: "true", LAST_BUILD: "true" }
    name: Build ${{ matrix.variant.name }} variant
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      KSU: ${{ matrix.variant.KSU }}
      KSU_SUSFS: ${{ matrix.variant.KSU_SUSFS }}
      KSU_MANUAL_HOOK: ${{ matrix.variant.KSU_MANUAL_HOOK }}
      LAST_BUILD: ${{ matrix.variant.LAST_BUILD }}
      TODO: "kernel"

  release:
    name: Create Unified Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_files

      - name: Extract variables from info.txt (Safe)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Find the info.txt file
          info_file=$(find release_files -name "info.txt" -type f | head -1)

          if [[ -f "$info_file" ]]; then
            echo "Found info.txt at: $info_file"

            # Extract variables safely without using functions.sh
            while IFS='=' read -r key value; do
              # Skip empty lines and comments
              [[ -z "$key" || "$key" =~ ^#.*$ ]] && continue

              # Clean up whitespace
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | xargs)

              # Validate that we have both key and value
              if [[ -n "$key" && -n "$value" ]]; then
                echo "Setting: $key=$value"
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < "$info_file"

            echo "Variables extracted successfully"
          fi

      - name: Generate release tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            # Get the latest tag, handle case where no tags exist
            LATEST_TAG=$(gh api repos/$RELEASE_REPO/tags --jq '.[0].name' 2>/dev/null || echo "")

            # Handle case when $LATEST_TAG doesn't contain $KERNEL_NAME or is empty
            if [[ -z "$LATEST_TAG" ]] || ! echo "$LATEST_TAG" | grep -q "$KERNEL_NAME"; then
                RELEASE_TAG="$KERNEL_NAME-r1"
            else
                RELEASE_TAG="$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')"
            fi

            echo "Release tag: $RELEASE_TAG"
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

      - name: Upload All Builds to release repo
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ env.RELEASE_REPO }}
          name: ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          prerelease: true
          files: release_files/**/*
          body: |
            ### ðŸ“¢ ${{ env.RELEASE_TAG }} Builds
            -> Linux ${{ env.LINUX_VERSION }} (android15-6.6-2024-08)
            -> SUSFS à¶ž ${{ env.SUSFS_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Send notification to TG (Safe)
        run: |
            MESSAGE="ðŸ“¦ Release completed! [Click](https://github.com/${{ env.RELEASE_REPO }}/releases/tag/${{ env.RELEASE_TAG }})"
            source functions.sh
            send_msg "$MESSAGE"
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
